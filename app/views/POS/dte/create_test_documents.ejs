<!DOCTYPE html>
<html lang="es">

<head>
  <%- include('../../Layouts/Head.ejs') %>
  <link rel="stylesheet" href="assets/libs/choices/choices.min.css">
</head>

<body class="<%= darkMode %>">
  <%- include('../../Layouts/SideBar.ejs') %>
  <div id="main">
    <%- include('../../Layouts/NavBar.ejs') %>

    <div class="container-fluid">
      <div class="card">
        <div class="card-header">
          <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Generacion de Documentos de prueba</h2>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-4">
              <div class="form-group">
                <label for="type">Modelo</label>
                <select class="form-control" name="type" id="type">
                  <option value="01">Factura</option>
                  <option value="03">CCFE/Nota Credito</option>
                  <option value="14">FSE</option>
                </select>
              </div>
            </div>

            <div class="col-4">
              <div class="form-group">
                <label for="cantidad_generar">Cantidad</label>
                <input type="number" name="cantidad_generar" id="cantidad_generar" class="form-control">
              </div>
            </div>

            <div class="col-4">
              <button class="btn btn-primary" id="staRTgAME">Comenzar</button>
            </div>
          </div>

        </div>

        <div class="card-body" id="responses">

        </div>
      </div>
    </div>

    <%- include('../../Layouts/Footer.ejs') %>
  </div>
</body>
<%- include('../../Layouts/Scripts.ejs') %>
<script src="assets/libs/choices/choices.min.js"></script>
<script>
  const IVA_VAL = Number.parseFloat('<%= VALOR_IVA %>');
  const helper_url = '<%= helper_url %>';
  var clients = null;
  var products = null;
  let error = false;
  generated = [];
  last_error = null;
  const emails = [
    'luisrivera4540@gmail.com',
    'luis4540rivera@gmail.com',
    'facturacion@riverasgroup.com',
    'admin@riverasgroup.com',
    'info@riverasgroup.com',
    'desarrollo@riverasgroup.com',
    '4540mp3@gmail.com'
  ];

  var enviando = false;

  var contador_correo = 0;

  function generarNumeroAleatorio(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Para generar un número entre 1 y 50:

  const generar_facturas = async (cantidad) => {

    if (cantidad > clients.length) {
      cantidad = clients.length;
    }

    //recorrer los clientes en orden para ir generando un DTE por cliente
    for (let index = 0; index < cantidad; index++) {
      //el receptor ya viene formateado desde el server
      var receptor = clients[index];
      //añado un correo propio para saber si el correo esta siendo enviado
      receptor.correo = null;
      // contador_correo = contador_correo > 5 ? 0 : contador_correo + 1;

      //decido la cantidad de detalles entre 1 y 15 para la factura, para no hacerlos de a 1
      let cant_detalles = generarNumeroAleatorio(2, 15);
      //voy a recorrer los productos para que vaya un producto diferente por cada detalle
      let inicio = generarNumeroAleatorio(0, (products.length - cant_detalles));

      //acumuladores para los totales
      var linea = 1,
        suma_gravadas = 0,
        suma_iva = 0,
        cuerpoDocumento = [];

      //recorro los detalles desde la posicion inicial hasta tener el numero de detalles random -1 
      for (let a = 0; a < cant_detalles; a++) {
        //el dato impoirtante del server
        const prod = products[inicio + a];
        //decido la cantidad vendida por cada 
        let qty = generarNumeroAleatorio(1, 25);
        venta_gravada = fix_number((qty * prod.precioUni), 4);
        iva = fix_number((venta_gravada - (venta_gravada / (1 + IVA_VAL))), 4);

        cuerpoDocumento.push({
          numItem: linea,
          tipoItem: 1,
          numeroDocumento: null,
          codigo: prod.codigo, // Permitir null si está vacío
          codTributo: null,
          descripcion: prod.descripcion,
          cantidad: qty,
          uniMedida: 59,
          precioUni: prod.precioUni,
          montoDescu: 0,
          ventaNoSuj: 0,
          ventaExenta: 0,
          ventaGravada: venta_gravada,
          tributos: null,
          psv: 0,
          noGravado: 0,
          ivaItem: iva
        });

        linea++;
        suma_gravadas = fix_number(suma_gravadas + venta_gravada, 2);
        suma_iva = fix_number(iva + suma_iva, 2);

      }

      const resumen = {
        totalNoSuj: 0,
        totalExenta: 0,
        totalGravada: suma_gravadas,
        subTotalVentas: suma_gravadas,
        descuNoSuj: 0,
        descuExenta: 0,
        descuGravada: 0,
        porcentajeDescuento: 0,
        totalDescu: 0,
        tributos: null,
        subTotal: suma_gravadas,
        ivaRete1: 0,
        reteRenta: 0,
        montoTotalOperacion: suma_gravadas,
        totalNoGravado: 0,
        totalPagar: suma_gravadas,
        totalLetras: String(money_to_string(suma_gravadas)).toLocaleUpperCase(),
        totalIva: fix_number(suma_iva),
        saldoFavor: 0,
        condicionOperacion: 1,
        pagos: null,
        numPagoElectronico: null
      }

      let data = {
        'dte_type': '01',
        "receptor": receptor,
        "cuerpoDocumento": cuerpoDocumento,
        "resumen": resumen,
        "apendice": null,
      }

      if (enviando) {
        await sleep(5000);
      }

      enviando = true;
      await postData('/pos/procces_dte_manual', data).then(async data => {
        enviando = false;
        if (data.status == 'success') {
          document.querySelector("#responses").innerHTML += `
          <div class="mt-5"><h4> DTE: ${data.json.codigo} generada con exito</h4>
          <a href="${helper_url}/utils/services/dte/inline?uuid=${data.json.dte.identificacion.codigoGeneracion}&fecha=${data.json.dte.identificacion.fecEmi}" target="_blank" class="btn round btn-outline-secondary">Ver DTE</a>
          <a href="/pos/getJson/${data.json.id}" target="_blank" class="btn round btn-outline-secondary ml-2 mr-2">Descargar DTE.json</a></div>`;
          generated.push(data.json);

          //     e.target.remove();
          successMessage(data.message);
        } else if (data.status == 'errorMessage') {

          //     e.target.disabled = false;
          last_error = data.message;
          errorMessage(data.message);
        } else {
          return errorMessage('Lo sentimos, ha ocurrido un error, por favor recarga la página he inténtalo nuevamente');
        }

        await sleep(5000);

      });


    }
  }

  const generar_credito_fiscal = async (cantidad) => {

    if (cantidad > clients.length) {
      cantidad = clients.length;
    }

    //recorrer los clientes en orden para ir generando un DTE por cliente
    for (let index = 0; index < cantidad; index++) {
      //el receptor ya viene formateado desde el server
      var receptor = clients[index];
      if (receptor.nit && receptor.nrc && receptor.telefono) {
        let cant_detalles = generarNumeroAleatorio(2, 8);
        let inicio = generarNumeroAleatorio(0, (products.length - cant_detalles));

        //voy a recorrer los productos para que vaya un producto diferente por cada detalle

        //acumuladores para los totales
        var linea = 1,
          suma_gravadas = 0,
          suma_iva = 0,
          cuerpoDocumento = [];

        //recorro los detalles desde la posicion inicial hasta tener el numero de detalles random -1 
        for (let a = 0; a < cant_detalles; a++) {
          //el dato impoirtante del server
          const prod = products[inicio + a];
          //decido la cantidad vendida por cada 
          let qty = generarNumeroAleatorio(1, 25);
          venta_gravada = fix_number((qty * prod.precioUni), 4);
          iva = fix_number((venta_gravada * IVA_VAL), 4);

          cuerpoDocumento.push({
            numItem: linea,
            tipoItem: 1,
            numeroDocumento: null,
            codigo: prod.codigo, // Permitir null si está vacío
            codTributo: null,
            descripcion: prod.descripcion,
            cantidad: qty,
            uniMedida: 59,
            precioUni: prod.precioUni,
            montoDescu: 0,
            ventaNoSuj: 0,
            ventaExenta: 0,
            ventaGravada: venta_gravada,
            tributos: ['20'],
            psv: 0,
            noGravado: 0,
          });

          linea++;
          suma_gravadas = fix_number(suma_gravadas + venta_gravada, 2);
          suma_iva = fix_number(iva + suma_iva, 2);

        }

        let total = fix_number((suma_gravadas + suma_iva), 2);

        const resumen = {
          totalNoSuj: 0,
          totalExenta: 0,
          totalGravada: suma_gravadas,
          subTotalVentas: suma_gravadas,
          descuNoSuj: 0,
          descuExenta: 0,
          descuGravada: 0,
          porcentajeDescuento: 0,
          totalDescu: 0,
          subTotal: suma_gravadas,
          ivaPerci1: 0,
          ivaRete1: 0,
          reteRenta: 0,
          montoTotalOperacion: total,
          totalNoGravado: 0,
          totalPagar: total,
          totalLetras: String(money_to_string(total)).toLocaleUpperCase(),
          tributos: [{
            codigo: "20",
            descripcion: "Impuesto al Valor Agregado 13%",
            valor: fix_number(suma_iva)
          }],
          saldoFavor: 0,
          condicionOperacion: 1,
          pagos: null,
          numPagoElectronico: null
        }



        let data = {
          'dte_type': '03',
          "receptor": receptor,
          "cuerpoDocumento": cuerpoDocumento,
          "resumen": resumen,
          "apendice": null,
        }

        if (enviando) {
          await sleep(5000);
        }

        enviando = true;
        await postData('/pos/procces_dte_manual', data).then(async data => {
          enviando = false;
          if (data.status == 'success') {
            document.querySelector("#responses").innerHTML += `
            <div class="mt-5"><h4> DTE: ${data.json.codigo} generada con exito</h4>
            <a href="${helper_url}/utils/services/dte/inline?uuid=${data.json.dte.identificacion.codigoGeneracion}&fecha=${data.json.dte.identificacion.fecEmi}" target="_blank" class="btn round btn-outline-secondary">Ver DTE</a>
            <a href="/pos/getJson/${data.json.id}" target="_blank" class="btn round btn-outline-secondary ml-2 mr-2">Descargar DTE.json</a></div>`;
            generated.push(data.json);

            // nota_credito(data.json);

            //     e.target.remove();
            successMessage(data.message);
          } else if (data.status == 'errorMessage') {

            //     e.target.disabled = false;
            last_error = data.message;
            errorMessage(data.message);
          } else {
            return errorMessage('Lo sentimos, ha ocurrido un error, por favor recarga la página he inténtalo nuevamente');
          }

          await sleep(5000);

        });
      }
    }

    
  }

  const nota_credito = async (model) => {
        var  cuerpoDocumento = [];
        let price = fix_number((model.dte.resumen.totalPagar * .10),2);

        cuerpoDocumento.push({
            numItem: 1,
            tipoItem: 1,
            numeroDocumento: model.dte.identificacion.codigoGeneracion,
            codigo: null, // Permitir null si está vacío
            codTributo: null,
            descripcion: 'Descuento por pago de contado',
            cantidad: 1,
            uniMedida: 59,
            precioUni: price,
            montoDescu: 0,
            ventaNoSuj: 0,
            ventaExenta: 0,
            ventaGravada: price,
            tributos: ['20']
           
          });

          

          total = fix_number((price * (1+IVA_VAL)),2)
       const resumen = {
        totalNoSuj: 0,
        totalExenta: 0,
        totalGravada: price,
        subTotalVentas: price,
        descuNoSuj: 0,
        descuExenta: 0,
        descuGravada: 0,
        totalDescu: 0,
        tributos: [{
          codigo: "20",
          descripcion: "Impuesto al Valor Agregado 13%",
          valor: fix_number((price * IVA_VAL),2)
        }] ,
        subTotal: price,
        ivaPerci1: 0,
        ivaRete1: 0,
        reteRenta: 0,
        montoTotalOperacion: total,
        totalLetras: String(money_to_string(total)).toLocaleUpperCase(),
        condicionOperacion: 1,
      }



        let data = {
          'dte_type': '05',
          "model": model.id,
          "cuerpoDocumento": cuerpoDocumento,
          "resumen": resumen,
          "apendice": null,
        }

        if (enviando) {
          await sleep(5000);
        }

        enviando = true;
        await postData('/pos/procces_dte_manual', data).then(async data => {
          enviando = false;
          if (data.status == 'success') {
            document.querySelector("#responses").innerHTML += `
            <div class="mt-5"><h4> DTE: ${data.json.codigo} generada con exito</h4>
            <a href="${helper_url}/utils/services/dte/inline?uuid=${data.json.dte.identificacion.codigoGeneracion}&fecha=${data.json.dte.identificacion.fecEmi}" target="_blank" class="btn round btn-outline-secondary">Ver DTE</a>
            <a href="/pos/getJson/${data.json.id}" target="_blank" class="btn round btn-outline-secondary ml-2 mr-2">Descargar DTE.json</a></div>`;
            generated.push(data.json);
            //     e.target.remove();
            successMessage(data.message);
          } else if (data.status == 'errorMessage') {

            //     e.target.disabled = false;
            last_error = data.message;
            errorMessage(data.message);
          } else {
            return errorMessage('Lo sentimos, ha ocurrido un error, por favor recarga la página he inténtalo nuevamente');
          }

          await sleep(5000);

        });
  }

  const generar_facturas_sujeto = async (cantidad) => {

  }

  document.addEventListener('DOMContentLoaded', event => {

    document.querySelector("#staRTgAME").addEventListener('click', e => {
      e.target.disabled = true;

      postData('/pos/data_to_test', {
        type: document.querySelector("#type").value
      }).then(data => {

        if (data.status == 'success') {
          clients = data.clients;
          products = data.products;

          let cantidad = document.querySelector("#cantidad_generar").value;
          switch (document.querySelector("#type").value) {
            case ('01'):
              generar_facturas(cantidad)
              break;
            case ('03'):
              generar_credito_fiscal(cantidad)
              break;
            case ('14'):
              generar_facturas_sujeto(cantidad)
              break;
            default:
              break;
          }

        } else if (data.status == 'errorMessage') {
          e.target.disabled = false;
          return errorMessage(data.message);
        } else {
          return errorMessage('Lo sentimos, ha ocurrido un error, por favor recarga la página he inténtalo nuevamente');
        }
      });
    });
  });
</script>

</html>



<!-- Font Awesome para iconos -->